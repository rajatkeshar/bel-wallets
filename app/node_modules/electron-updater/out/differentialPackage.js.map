{"version":3,"file":"differentialPackage.js","sourceRoot":"","sources":["../src/differentialPackage.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;oEAgWA,AAAK,WAAuB,AAAY;AACtC,AAAM,eAAC,AAAI,KAAC,AAAK,MAAC,CAAC,MAAM,AAAU,WAAC,AAAI,AAAC,AAAC,OAAC,AAAQ,AAAE,AAAC,AACxD;AAAC;;;;;;;;;AAjWD,AAAO,AAAsB,AAA8B,AAAE,AAAe,AAAE,AAAS,AAAiC,AAAa,AAAE,AAAM,AAAsB;;;;;;AACnK,AAAO,AAA0B,AAAqB,AAAE,AAAM,AAAsC;;;;;;AACpG,AAAO,AAAE,AAAK,AAAE,AAAgB,AAAE,AAAiB,AAAE,AAAI,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AAIvF,MAAM,AAAU,aAAQ,AAAe,gDAAC,AAAS,UAAC,AAAO,QAAC,AAAM,AAAC,QAAC,AAAU,AAAC,AAE7E,AAAM;oCAOL;;AAED,0BAA0B,AAAkB,MAAE,AAAkB;AAC9D,UAAM,AAAgB,mBAAG,IAAI,AAAG,AAAkB;AAClD,UAAM,AAAc,iBAAG,IAAI,AAAG,AAAkB;AAChD,QAAI,AAAM,SAAG,AAAU;AACvB,AAAG,AAAC,SAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAI,KAAC,AAAS,UAAC,AAAM,QAAE,AAAC,AAAE,KAAE,AAAC;AAC/C,cAAM,AAAQ,WAAG,AAAI,KAAC,AAAS,UAAC,AAAC,AAAC;AAClC,cAAM,AAAI,OAAG,AAAI,KAAC,AAAK,MAAC,AAAC,AAAC;AAC1B,AAAgB,yBAAC,AAAG,IAAC,AAAQ,UAAE,AAAM,AAAC;AACtC,AAAc,uBAAC,AAAG,IAAC,AAAQ,UAAE,AAAI,AAAC;AAClC,AAAM,kBAAI,AAAI,AAChB;AAAC;AACD,AAAM,WAAC,EAAC,AAAgB,kBAAE,AAAiB,mBAAE,AAAc,AAAC,AAC9D;AAAC,AAED,AAAM;;AAOJ,gBAA6B,AAAsC,oBAAmB,AAA+B,cAAmB,AAAsC;AAAjJ,aAAkB,qBAAlB,AAAkB,AAAoB;AAAmB,aAAY,eAAZ,AAAY,AAAmB;AAAmB,aAAO,UAAP,AAAO,AAA+B;AAC5K,AAAI,aAAC,AAAM,SAAG,AAAO,QAAC,AAAM;AAC5B,AAAI,aAAC,AAAkB,qBAAG,AAA8B,wFAAC,AAAO,QAAC,AAAM,QAAE,AAAE,AAAC,AAC9E;AAAC;AAED,QAAc,AAAa;AACzB,AAAM,eAAC,AAAC,AACV;AAAC;AAEO,AAAoB,yBAAC,SAAyB,AAAK;AACzD,AAAM,iCACD,AAAI,KAAC,AAAkB,sBAC1B,AAAM,QACN,AAAO,SAAE,kBACJ,AAAI,KAAC,AAAO,QAAC,AAAc,kBAC9B,AAAM,QAAE,AAAK,AACP,AACT,AACH;AAAC;AAEK,AAAmB,uBAAzB,AAAK,CAAqB,AAAuB;;;;AAC/C,kBAAM,AAAW,cAAG,AAAI,MAAC,AAAqC;AAC9D,kBAAM,AAAM,SAAG,AAAW,YAAC,AAAI,OAAG,AAAW,YAAC,AAAY,aAAG,AAAW,YAAC,AAAc;AACvF,AAAI,kBAAC,AAAkB,qBAAG,MAAM,AAAI,MAAC,AAAe,gBAAC,AAAM,QAAE,AAAW,YAAC,AAAI,OAAG,AAAC,AAAC;AAClF,kBAAM,AAAW,cAAG,MAAM,AAAY,aAAC,AAAI,MAAC,AAAkB,mBAAC,AAAK,MAAC,AAAW,YAAC,AAAY,AAAC,AAAC;AAC/F,kBAAM,AAAW,cAAG,MAAM,AAAQ,8CAAC,AAAe,AAAC;AACnD,kBAAM,AAAI,MAAC,AAAQ,SAAC,AAAW,aAAE,AAAW,AAAC,AAC/C;;AAAC;AAEK,AAAgB,oBAAtB,AAAK,CAAkB,AAAqB;;;;AAC1C,kBAAM,AAAW,cAAG,AAAI,OAAC,AAAkB;AAC3C,kBAAM,AAAQ,WAAG,AAAW,YAAC,AAAM;AACnC,kBAAM,AAAM,SAAG,AAAQ,AAAG,YAAC,AAAW,YAAC,AAAc,eAAG,AAAC,AAAC;AAC1D,AAAI,mBAAC,AAAkB,qBAAG,MAAM,AAAI,OAAC,AAAe,gBAAC,AAAM,QAAE,AAAQ,WAAG,AAAC,AAAC;AAC1E,kBAAM,AAAW,cAAG,MAAM,AAAY,aAAC,AAAI,OAAC,AAAkB,mBAAC,AAAK,MAAC,AAAC,GAAE,AAAI,OAAC,AAAkB,mBAAC,AAAM,SAAG,AAAC,AAAC,AAAC;AAC5G,kBAAM,AAAI,OAAC,AAAQ,SAAC,AAAW,aAAE,AAAW,AAAC,AAC/C;;AAAC;AAEa,AAAQ,YAAd,AAAK,CAAU,AAAqB,aAAE,AAAqB;;;;AACjE,AAAyI;AACzI,AAAE,AAAC,gBAAC,AAAW,YAAC,AAAO,YAAK,AAAW,YAAC,AAAO,AAAC,SAAC,AAAC;AAChD,sBAAM,IAAI,AAAK,AAAC,+BAAyB,AAAW,YAAC,AAAO,aAAM,AAAW,YAAC,AAAO,OAA8B,AAAC,AACtH;AAAC;AAED,kBAAM,AAAU,aAAG,AAAI,OAAC,AAAiB,kBAAC,AAAW,aAAE,AAAW,AAAC;AACnE,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAM,OAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAC9B,AAAI,uBAAC,AAAM,OAAC,AAAK,MAAC,AAAI,KAAC,AAAS,UAAC,AAAU,YAAE,AAAI,MAAE,AAAC,AAAC,AAAC,AACxD;AAAC;AAED,gBAAI,AAAY,eAAG,AAAC;AACpB,gBAAI,AAAQ,WAAG,AAAC;AAChB,AAAG,AAAC,iBAAC,MAAM,AAAS,aAAI,AAAU,AAAC,YAAC,AAAC;AACnC,sBAAM,AAAM,SAAG,AAAS,UAAC,AAAG,MAAG,AAAS,UAAC,AAAK;AAC9C,AAAE,AAAC,oBAAC,AAAS,UAAC,AAAI,SAAK,AAAa,cAAC,AAAQ,AAAC,UAAC,AAAC;AAC9C,AAAY,oCAAI,AAAM,AACxB;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAQ,gCAAI,AAAM,AACpB;AAAC,AACH;AAAC;AAED,kBAAM,AAAc,iBAAG,AAAI,OAAC,AAAkB,mBAAC,AAAI;AACnD,AAAE,AAAC,gBAAE,AAAY,eAAG,AAAQ,WAAG,AAAI,OAAC,AAAkB,mBAAC,AAAM,SAAG,AAAI,OAAC,AAAa,AAAC,aAA/E,KAAoF,AAAc,AAAC,gBAAC,AAAC;AACvG,sBAAM,IAAI,AAAK,AAAC,sDAAgD,AAAY,2BAAe,AAAQ,6BAAqB,AAAc,cAAE,AAAC,AAC3I;AAAC;AAED,AAAI,mBAAC,AAAM,OAAC,AAAI,AAAC,cAAS,AAAW,YAAC,AAAc,AAAC,iCAAkB,AAAW,YAAC,AAAY,AAAC,kBAAK,AAAI,KAAC,AAAK,MAAC,AAAY,AAAG,gBAAC,AAAc,iBAAG,AAAG,AAAC,AAAC,KAAI,AAAC;AAE3J,kBAAM,AAAI,OAAC,AAAY,aAAC,AAAU,AAAC,AACrC;;AAAC;AAEa,AAAY,gBAAlB,AAAK,CAAc,AAA4B;;;;AACrD,AAA2D;AAC3D,kBAAM,AAAS,YAAG,AAAI,OAAC,AAAa,kBAAK,AAAC,AAAC,AAAC,IAAC,AAAI,AAAC,AAAC,OAAC,MAAM,AAAI,OAAC,AAAe,gBAAC,AAAC,GAAE,AAAI,OAAC,AAAa,gBAAG,AAAC,AAAC;AAEzG,kBAAM,AAAS,YAAG,MAAM,AAAI,0CAAC,AAAI,OAAC,AAAO,QAAC,AAAc,gBAAE,AAAG,AAAC;AAC9D,sEAA0B,UAAC,AAAO,SAAE,AAAM,AAAE,AAAE;AAC5C,sBAAM,AAAO,UAAe,AAAE;AAC9B,sBAAM,AAAe,kBAAG,AAAI,AAAe,wEAAC,AAAI,OAAC,AAAkB,mBAAC,AAAM,AAAC;AAC3E,AAA0E;AAC1E,AAAe,gCAAC,AAAe,kBAAG,AAAK;AACvC,AAAO,wBAAC,AAAI,KAAC,AAAe,AAAC;AAE7B,sBAAM,AAAO,UAAG,AAAiB,uDAAC,AAAI,OAAC,AAAO,QAAC,AAAO,AAAC;AACvD,AAAO,wBAAC,AAAE,GAAC,AAAQ,UAAE,AAAG,AAAE;AACvB,AAAO,4BAAC,AAAa,MAAC,AAAG,AAAE;AAC1B,4BAAI,AAAC;AACH,AAAe,4CAAC,AAAQ,AAAE,AAC5B;AAAC,0BACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAM,mCAAC,AAAC,AAAC;AACT,AAAM,AACR;AAAC;AAED,AAAO,AAAE,AACX;AAAC,AAAC,AACJ;AAAC,AAAC;AAEF,AAAO,wBAAC,AAAI,KAAC,AAAO,AAAC;AAErB,oBAAI,AAAU,aAAG,AAAI;AACrB,AAAG,AAAC,qBAAC,MAAM,AAAM,UAAI,AAAO,AAAC,SAAC,AAAC;AAC7B,AAAM,2BAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAC1B,AAAE,AAAC,wBAAC,AAAU,cAAI,AAAI,AAAC,MAAC,AAAC;AACvB,AAAU,qCAAG,AAAM,AACrB;AAAC,AACD,AAAI,2BAAC,AAAC;AACJ,AAAU,qCAAG,AAAU,WAAC,AAAI,KAAC,AAAM,AAAC,AACtC;AAAC,AACH;AAAC;AAED,sBAAM,AAAW,cAAG,AAAO,QAAC,AAAC,AAAC;AAE9B,sBAAM,AAAC,IAAG,UAAC,AAAa,AAAE,AAAE;AAC1B,AAAE,AAAC,wBAAC,AAAK,SAAI,AAAU,WAAC,AAAM,AAAC,QAAC,AAAC;AAC/B,AAAW,oCAAC,AAAG,IAAC,AAAI,OAAC,AAAkB,AAAC;AACxC,AAAM,AACR;AAAC;AAED,0BAAM,AAAS,YAAG,AAAU,WAAC,AAAK,AAAE,AAAC;AAErC,AAAE,AAAC,wBAAC,AAAS,UAAC,AAAI,SAAK,AAAa,cAAC,AAAI,AAAC,MAAC,AAAC;AAC1C,8BAAM,AAAU,mEAAoB,AAAI,OAAC,AAAO,QAAC,AAAc;AAC7D,AAAE,gCAAE,AAAS;AACb,AAAS,uCAAE,AAAK;AAChB,AAAK,mCAAE,AAAS,UAAC,AAAK;AACtB,AAAmB;AACnB,AAAG,iCAAE,AAAS,UAAC,AAAG,MAAG,AAAC,AACvB,AAAC;AAN+D,yBAA9C,AAAgB;AAOnC,AAAU,mCAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAC9B,AAAU,mCAAC,AAAI,KAAC,AAAK;AAAE,AAAG,AAAE,mCAAC,AAAC,EAAC,AAAK,AAAC,AAAC;;AACtC,AAAU,mCAAC,AAAI,KAAC,AAAW;AACzB,AAAG,iCAAE,AAAK,AACX,AAAC,AACJ;AAH+B;AAG9B,AACD,AAAI,2BAAC,AAAC;AACJ,AAA2F;AAC3F,AAA4G;AAC5G,8BAAM,AAAc,iBAAG,AAAI,OAAC,AAAoB,qBAAC,AAAK,AAAC;AACvD,AAAc,uCAAC,AAAS,QAAC,AAAK,AAAG,iBAAS,AAAS,UAAC,AAAK,SAAI,AAAS,UAAC,AAAG,MAAG,AAAC,CAAE;AAChF,8BAAM,AAAO,iBAAQ,AAAY,aAAC,AAAS,UAAC,AAAc,gBAAE,AAAQ,AAAC,AAAE;AACrE,AAA6H;AAC7H,AAAE,AAAC,gCAAC,AAAQ,SAAC,AAAU,cAAI,AAAG,AAAC,KAAC,AAAC;AAC/B,AAAM,uCAAC,AAAI,AAAS,kEAAC,AAAQ,AAAC,AAAC,AACjC;AAAC;AAED,AAAQ,qCAAC,AAAI,KAAC,AAAW;AACvB,AAAG,qCAAE,AAAK,AACX,AAAC;AAFyB;AAG3B,AAAQ,qCAAC,AAAI,KAAC,AAAK;AAAE,AAAG,AAAE,uCAAC,AAAC,EAAC,AAAK,AAAC,AAAC,AACtC;;AAAC,AAAC,yBAVc,AAAI;AAWpB,AAAI,+BAAC,AAAY,aAAC,AAA0B,2BAAC,AAAO,SAAE,AAAM,AAAC;AAC7D,AAAO,gCAAC,AAAG,AAAE,AACf;AAAC,AACH;AAAC;AAED,AAAE,AAAC,oBAAC,AAAS,aAAI,AAAI,AAAC,MAAC,AAAC;AACtB,AAAC,sBAAC,AAAC,AAAC,AACN;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAW,gCAAC,AAAK,MAAC,AAAS;AAAE,AAAG,AAAE,+BAAC,AAAC,EAAC,AAAC,AAAC,AAAC,AAC1C;;AAAC,AACH;AAAC,AAAC,aAtFI,AAAI,AAAe,EAuFtB,AAAO;AAAC,AAAG,AAAE,uBAAC,AAAK,2CAAC,AAAS,AAAC,AAAC,AACpC;;;AAAC;AAEO,AAAiB,sBAAC,AAAqB,aAAE,AAAqB;AACpE,cAAM,AAAe,kBAAG,AAAiB,kBAAC,AAAW,YAAC,AAAK,AAAC;AAC5D,cAAM,AAAe,kBAAG,AAAiB,kBAAC,AAAW,YAAC,AAAK,AAAC;AAE5D,cAAM,AAAW,cAAG,AAAa,cAAC,AAAW,YAAC,AAAK,AAAC;AAEpD,YAAI,AAAa,gBAAqB,AAAI;AAE1C,cAAM,AAAU,aAAqB,AAAE;AACvC,AAAG,AAAC,aAAC,MAAM,AAAY,gBAAI,AAAW,YAAC,AAAK,AAAC,OAAC,AAAC;AAC7C,kBAAM,AAAI,OAAG,AAAY,aAAC,AAAI;AAC9B,kBAAM,AAAQ,WAAG,AAAW,YAAC,AAAG,IAAC,AAAI,AAAC;AACtC,AAAE,AAAC,gBAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,AAAW;AACX,AAAU,2BAAC,AAAI;AACb,AAAI,0BAAE,AAAa,cAAC,AAAQ;AAC5B,AAAK,2BAAE,AAAY,aAAC,AAAM;AAC1B,AAAG,yBAAE,AAAY,aAAC,AAAM,SAAG,AAAY,aAAC,AAAK,MAAC,AAAM,OAAC,CAAC,AAAW,aAAE,AAAY,AAAE,AAAE,iBAAC,AAAW,cAAG,AAAY,AAAC,AAChH,AAAC;AAJc;AAKhB,AAAQ,AACV;AAAC;AAED,kBAAM,AAAO,UAAG,AAAe,gBAAC,AAAG,IAAC,AAAI,AAAG;AAC3C,gBAAI,AAAiB,oBAAG,AAAC;AAEzB,kBAAM,EAAC,AAAgB,kBAAE,AAAmB,qBAAE,AAAiB,AAAC,sBAAG,AAAgB,iBAAC,AAAe,gBAAC,AAAG,IAAC,AAAI,AAAG,OAAE,AAAQ,SAAC,AAAM,AAAC;AAEjI,gBAAI,AAAS,YAAG,AAAY,aAAC,AAAM;AACnC,AAAG,AAAC,iBAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAO,QAAC,AAAS,UAAC,AAAM,QAAE,AAAS,aAAI,AAAO,QAAC,AAAK,MAAC,AAAC,AAAC,IAAE,AAAC,AAAE,KAAE,AAAC;AACjF,sBAAM,AAAS,YAAG,AAAO,QAAC,AAAK,MAAC,AAAC,AAAC;AAClC,sBAAM,AAAQ,WAAG,AAAO,QAAC,AAAS,UAAC,AAAC,AAAC;AACrC,oBAAI,AAAS,YAA8B,AAAmB,oBAAC,AAAG,IAAC,AAAQ,AAAC;AAC5E,AAAE,AAAC,oBAAC,AAAS,aAAI,AAAI,QAAI,AAAiB,kBAAC,AAAG,IAAC,AAAQ,AAAC,cAAK,AAAS,AAAC,WAAC,AAAC;AACvE,AAAI,yBAAC,AAAM,OAAC,AAAI,AAAC,mBAAc,AAAQ,8CAAsC,AAAiB,kBAAC,AAAG,IAAC,AAAQ,AAAC,mBAAU,AAAS,SAAG,AAAC;AACnI,AAAS,gCAAG,AAAI,AAClB;AAAC;AAED,AAAE,AAAC,oBAAC,AAAS,aAAI,AAAI,AAAC,MAAC,AAAC;AACtB,AAAiB,AAAE;AAEnB,AAAE,AAAC,wBAAC,AAAa,iBAAI,AAAI,QAAI,AAAa,cAAC,AAAI,SAAK,AAAa,cAAC,AAAQ,YAAI,AAAa,cAAC,AAAG,QAAK,AAAS,AAAC,WAAC,AAAC;AAC9G,AAAa;AACX,AAAI,kCAAE,AAAa,cAAC,AAAQ;AAC5B,AAAK,mCAAE,AAAS;AAChB,AAAG,iCAAE,AAAS,YAAG,AAAS,AAC3B;AAJe;AAKhB,AAAU,mCAAC,AAAI,KAAC,AAAa,AAAC,AAChC;AAAC,AACD,AAAI,2BAAC,AAAC;AACJ,AAAa,sCAAC,AAAG,OAAI,AAAS,AAChC;AAAC,AACH;AAAC,AACD,AAAI,2BAAK,AAAa,iBAAI,AAAI,QAAI,AAAa,cAAC,AAAI,SAAK,AAAa,cAAC,AAAI,QAAI,AAAa,cAAC,AAAG,QAAK,AAAS,AAAC,WAAC,AAAC;AAC/G,AAAa;AACX,AAAI,8BAAE,AAAa,cAAC,AAAI;AACxB,AAAK,+BAAE,AAAS;AAChB,AAAG,6BAAE,AAAS,YAAG,AAAS,AAC3B;AAJe;AAKhB,AAAU,+BAAC,AAAI,KAAC,AAAa,AAAC,AAChC;AAAC,AACD,AAAI,iBARC,AAAE,AAAC,MAQH,AAAC;AACJ,AAAa,kCAAC,AAAG,OAAI,AAAS,AAChC;AAAC,AACH;AAAC;AAED,AAAE,AAAC,gBAAC,AAAiB,oBAAG,AAAC,AAAC,GAAC,AAAC;AAC1B,AAAI,qBAAC,AAAM,OAAC,AAAI,AAAC,YAAO,AAAY,aAAC,AAAI,SAAK,AAAM,AAAC,AAAC,SAAC,AAAE,AAAC,AAAC,AAAC,KAAC,AAAG,MAAG,AAAY,aAAC,AAAI,AAAC,YAAQ,AAAiB,iBAAiB,AAAC,AAClI;AAAC,AACH;AAAC;AACD,AAAM,eAAC,AAAU,AACnB;AAAC;AAEa,AAAe,mBAArB,AAAK,CAAiB,AAAa,OAAE,AAAoB;;;;AAC/D,kBAAM,AAAM,SAAG,AAAM,OAAC,AAAW,YAAE,AAAY,eAAG,AAAC,AAAC,CAAlB,GAAqB,AAAK,AAAC;AAC7D,kBAAM,AAAc,iBAAG,AAAI,OAAC,AAAoB,AAAE;AAClD,AAAc,2BAAC,AAAS,QAAC,AAAK,AAAG,iBAAS,AAAK,SAAI,AAAY,YAAE;AACjE,gBAAI,AAAQ,WAAG,AAAC;AAChB,yBAAW,AAAO,QAAC,AAAc,gBAAE,AAAK,AAAC,AAAE;AACzC,AAAK,sBAAC,AAAI,KAAC,AAAM,QAAE,AAAQ,AAAC;AAC5B,AAAQ,4BAAI,AAAK,MAAC,AAAM,AAC1B;AAAC,AAAC,aAHI,AAAI;AAIV,AAAM,mBAAC,AAAM,AACf;;AAAC;AAEO,AAAO,YAAC,AAA8B,gBAAE,AAAoC;AAClF,AAAM,mEAAqB,CAAC,AAAO,SAAE,AAAM,AAAE,AAAE;AAC7C,kBAAM,AAAO,eAAQ,AAAY,aAAC,AAAS,UAAC,AAAc,gBAAE,AAAQ,AAAC,AAAE;AACrE,AAA6H;AAC7H,AAAE,AAAC,oBAAC,AAAQ,SAAC,AAAU,cAAI,AAAG,AAAC,KAAC,AAAC;AAC/B,AAAM,2BAAC,AAAI,AAAS,kEAAC,AAAQ,AAAC,AAAC,AACjC;AAAC;AAED,AAAE,AAAC,oBAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AAChC,0BAAM,AAAY,eAAG,AAAa,uEAAC,AAAQ,UAAE,AAAe,AAAC;AAC7D,AAAE,AAAC,wBAAC,AAAY,gBAAI,AAAI,QAAI,AAAY,iBAAK,AAAM,AAAC,QAAC,AAAC;AACpD,AAAM,+BAAC,IAAI,AAAK,MAAC,AAAsC,AAAC,AAAC,AAC3D;AAAC,AACH;AAAC;AAED,AAAQ,yBAAC,AAAE,GAAC,AAAM,QAAE,AAAW,AAAC;AAChC,AAAQ,yBAAC,AAAE,GAAC,AAAK,OAAE,AAAG,AAAE;AACtB,AAAO,AAAE,AACX;AAAC,AAAC,AACJ;AAAC,AAAC,aAjBc,AAAI;AAkBpB,AAAI,iBAAC,AAAY,aAAC,AAA0B,2BAAC,AAAO,SAAE,AAAM,AAAC;AAC7D,AAAO,oBAAC,AAAG,AAAE,AACf;AAAC,AAAC,AACJ,SAtBS,AAAI,AAAe;AAsB3B,AACF,AAED,AAAM;;;MAAsC,uCAAQ,AAAsB;AACxE,gBAAY,AAA+B,aAAE,AAA+B,cAAE,AAAsC;AAClH,AAAK,cAAC,AAAW,aAAE,AAAY,cAAE,AAAO,AAAC,AAC3C;AAAC;AAED,QAAc,AAAa;AACzB,AAAM,AAAC,AAAqB,AAC9B;AAAC,AACF;;;AAED,IAAK,AAEJ;AAFD,WAAK,AAAa;AAChB,+CAAI;AAAE,mDAAQ,AAChB;AAAC,GAFI,AAAa,kBAAb,AAAa,gBAEjB;AASD,uBAAuB,AAAyB;AAC9C,UAAM,AAAM,SAAG,IAAI,AAAG,AAAwB;AAC9C,AAAG,AAAC,SAAC,MAAM,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAM,eAAC,AAAG,IAAC,AAAI,KAAC,AAAI,MAAE,AAAI,AAAC,AAC7B;AAAC;AACD,AAAM,WAAC,AAAM,AACf;AAAC;AAED,2BAA2B,AAAyB;AAClD,UAAM,AAAM,SAAG,IAAI,AAAG,AAAwB;AAC9C,AAAG,AAAC,SAAC,MAAM,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAM,eAAC,AAAG,IAAC,AAAI,KAAC,AAAI,MAAE,AAAI,AAAC,AAC7B;AAAC;AACD,AAAM,WAAC,AAAM,AACf;AAAC;;AAMD,qBAAqB,AAAa,OAAE,AAAM,SAAG,AAAK;AAChD,AAAM,WAAC,IAAI,AAAI,KAAC,AAAY,aAAC,AAAI,AAAC,MAAC,AAAM,OAAC,CAAC,AAAK,QAAG,AAAI,AAAC,MAAC,AAAO,QAAC,AAAC,AAAQ,AAAC,MAAG,AAAM,AACtF;AAAC","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { BlockMapDataHolder, configureRequestOptionsFromUrl, DigestTransform, HttpError, HttpExecutor, PackageFileInfo, safeGetHeader } from \"builder-util-runtime\"\nimport { BlockMap, BlockMapFile, SIGNATURE_HEADER_SIZE } from \"builder-util-runtime/out/blockMapApi\"\nimport { close, createReadStream, createWriteStream, open, readJson } from \"fs-extra-p\"\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\nimport { Logger } from \"./main\"\n\nconst inflateRaw: any = BluebirdPromise.promisify(require(\"zlib\").inflateRaw)\n\nexport class DifferentialDownloaderOptions {\n  readonly oldPackageFile: string\n  readonly newUrl: string\n  readonly logger: Logger\n  readonly newFile: string\n\n  readonly requestHeaders: OutgoingHttpHeaders | null\n}\n\nfunction buildChecksumMap(file: BlockMapFile, fileOffset: number) {\n  const checksumToOffset = new Map<string, number>()\n  const checksumToSize = new Map<string, number>()\n  let offset = fileOffset\n  for (let i = 0; i < file.checksums.length; i++) {\n    const checksum = file.checksums[i]\n    const size = file.sizes[i]\n    checksumToOffset.set(checksum, offset)\n    checksumToSize.set(checksum, size)\n    offset += size\n  }\n  return {checksumToOffset, checksumToOldSize: checksumToSize}\n}\n\nexport class DifferentialDownloader {\n  private readonly baseRequestOptions: RequestOptions\n\n  private fileMetadataBuffer: Buffer\n\n  private readonly logger: Logger\n\n  constructor(private readonly blockAwareFileInfo: BlockMapDataHolder, private readonly httpExecutor: HttpExecutor<any>, private readonly options: DifferentialDownloaderOptions) {\n    this.logger = options.logger\n    this.baseRequestOptions = configureRequestOptionsFromUrl(options.newUrl, {})\n  }\n\n  protected get signatureSize() {\n    return 0\n  }\n\n  private createRequestOptions(method: \"head\" | \"get\" = \"get\"): RequestOptions {\n    return {\n      ...this.baseRequestOptions,\n      method,\n      headers: {\n        ...this.options.requestHeaders,\n        Accept: \"*/*\",\n      } as any,\n    }\n  }\n\n  async downloadNsisPackage(oldBlockMapFile: string) {\n    const packageInfo = this.blockAwareFileInfo as PackageFileInfo\n    const offset = packageInfo.size - packageInfo.headerSize!! - packageInfo.blockMapSize!!\n    this.fileMetadataBuffer = await this.readRemoteBytes(offset, packageInfo.size - 1)\n    const newBlockMap = await readBlockMap(this.fileMetadataBuffer.slice(packageInfo.headerSize!!))\n    const oldBlockMap = await readJson(oldBlockMapFile)\n    await this.download(oldBlockMap, newBlockMap)\n  }\n\n  async downloadAppImage(oldBlockMap: BlockMap) {\n    const packageInfo = this.blockAwareFileInfo\n    const fileSize = packageInfo.size!!\n    const offset = fileSize - (packageInfo.blockMapSize!! + 4)\n    this.fileMetadataBuffer = await this.readRemoteBytes(offset, fileSize - 1)\n    const newBlockMap = await readBlockMap(this.fileMetadataBuffer.slice(0, this.fileMetadataBuffer.length - 4))\n    await this.download(oldBlockMap, newBlockMap)\n  }\n\n  private async download(oldBlockMap: BlockMap, newBlockMap: BlockMap) {\n    // we don't check other metadata like compressionMethod - generic check that it is make sense to differentially update is suitable for it\n    if (oldBlockMap.version !== newBlockMap.version) {\n      throw new Error(`version is different (${oldBlockMap.version} - ${newBlockMap.version}), full download is required`)\n    }\n\n    const operations = this.computeOperations(oldBlockMap, newBlockMap)\n    if (this.logger.debug != null) {\n      this.logger.debug(JSON.stringify(operations, null, 2))\n    }\n\n    let downloadSize = 0\n    let copySize = 0\n    for (const operation of operations) {\n      const length = operation.end - operation.start\n      if (operation.kind === OperationKind.DOWNLOAD) {\n        downloadSize += length\n      }\n      else {\n        copySize += length\n      }\n    }\n\n    const newPackageSize = this.blockAwareFileInfo.size\n    if ((downloadSize + copySize + this.fileMetadataBuffer.length + this.signatureSize) !== newPackageSize) {\n      throw new Error(`Internal error, size mismatch: downloadSize: ${downloadSize}, copySize: ${copySize}, newPackageSize: ${newPackageSize}`)\n    }\n\n    this.logger.info(`Full: ${formatBytes(newPackageSize)}, To download: ${formatBytes(downloadSize)} (${Math.round(downloadSize / (newPackageSize / 100))}%)`)\n\n    await this.downloadFile(operations)\n  }\n\n  private async downloadFile(operations: Array<Operation>) {\n    // todo we can avoid download remote and construct manually\n    const signature = this.signatureSize === 0 ? null : await this.readRemoteBytes(0, this.signatureSize - 1)\n\n    const oldFileFd = await open(this.options.oldPackageFile, \"r\")\n    await new BluebirdPromise((resolve, reject) => {\n      const streams: Array<any> = []\n      const digestTransform = new DigestTransform(this.blockAwareFileInfo.sha512)\n      // to simply debug, do manual validation to allow file to be fully written\n      digestTransform.isValidateOnEnd = false\n      streams.push(digestTransform)\n\n      const fileOut = createWriteStream(this.options.newFile)\n      fileOut.on(\"finish\", () => {\n        (fileOut.close as any)(() => {\n          try {\n            digestTransform.validate()\n          }\n          catch (e) {\n            reject(e)\n            return\n          }\n\n          resolve()\n        })\n      })\n\n      streams.push(fileOut)\n\n      let lastStream = null\n      for (const stream of streams) {\n        stream.on(\"error\", reject)\n        if (lastStream == null) {\n          lastStream = stream\n        }\n        else {\n          lastStream = lastStream.pipe(stream)\n        }\n      }\n\n      const firstStream = streams[0]\n\n      const w = (index: number) => {\n        if (index >= operations.length) {\n          firstStream.end(this.fileMetadataBuffer)\n          return\n        }\n\n        const operation = operations[index++]\n\n        if (operation.kind === OperationKind.COPY) {\n          const readStream = createReadStream(this.options.oldPackageFile, {\n            fd: oldFileFd,\n            autoClose: false,\n            start: operation.start,\n            // end is inclusive\n            end: operation.end - 1,\n          })\n          readStream.on(\"error\", reject)\n          readStream.once(\"end\", () => w(index))\n          readStream.pipe(firstStream, {\n            end: false\n          })\n        }\n        else {\n          // https://github.com/electron-userland/electron-builder/issues/1523#issuecomment-327084661\n          // todo to reduce http requests we need to consolidate non sequential download operations (Multipart ranges)\n          const requestOptions = this.createRequestOptions(\"get\")\n          requestOptions.headers!!.Range = `bytes=${operation.start}-${operation.end - 1}`\n          const request = this.httpExecutor.doRequest(requestOptions, response => {\n            // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\n            if (response.statusCode >= 400) {\n              reject(new HttpError(response))\n            }\n\n            response.pipe(firstStream, {\n              end: false\n            })\n            response.once(\"end\", () => w(index))\n          })\n          this.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n          request.end()\n        }\n      }\n\n      if (signature == null) {\n        w(0)\n      }\n      else {\n        firstStream.write(signature, () => w(0))\n      }\n    })\n      .finally(() => close(oldFileFd))\n  }\n\n  private computeOperations(oldBlockMap: BlockMap, newBlockMap: BlockMap) {\n    const nameToOldBlocks = buildBlockFileMap(oldBlockMap.files)\n    const nameToNewBlocks = buildBlockFileMap(newBlockMap.files)\n\n    const oldEntryMap = buildEntryMap(oldBlockMap.files)\n\n    let lastOperation: Operation | null = null\n\n    const operations: Array<Operation> = []\n    for (const blockMapFile of newBlockMap.files) {\n      const name = blockMapFile.name\n      const oldEntry = oldEntryMap.get(name)\n      if (oldEntry == null) {\n        // new file\n        operations.push({\n          kind: OperationKind.DOWNLOAD,\n          start: blockMapFile.offset,\n          end: blockMapFile.offset + blockMapFile.sizes.reduce((accumulator, currentValue) => accumulator + currentValue),\n        })\n        continue\n      }\n\n      const newFile = nameToNewBlocks.get(name)!!\n      let changedBlockCount = 0\n\n      const {checksumToOffset: checksumToOldOffset, checksumToOldSize} = buildChecksumMap(nameToOldBlocks.get(name)!!, oldEntry.offset)\n\n      let newOffset = blockMapFile.offset\n      for (let i = 0; i < newFile.checksums.length; newOffset += newFile.sizes[i], i++) {\n        const blockSize = newFile.sizes[i]\n        const checksum = newFile.checksums[i]\n        let oldOffset: number | null | undefined = checksumToOldOffset.get(checksum)\n        if (oldOffset != null && checksumToOldSize.get(checksum) !== blockSize) {\n          this.logger.warn(`Checksum (\"${checksum}\") matches, but size differs (old: ${checksumToOldSize.get(checksum)}, new: ${blockSize})`)\n          oldOffset = null\n        }\n\n        if (oldOffset == null) {\n          changedBlockCount++\n\n          if (lastOperation == null || lastOperation.kind !== OperationKind.DOWNLOAD || lastOperation.end !== newOffset) {\n            lastOperation = {\n              kind: OperationKind.DOWNLOAD,\n              start: newOffset,\n              end: newOffset + blockSize,\n            }\n            operations.push(lastOperation)\n          }\n          else {\n            lastOperation.end += blockSize\n          }\n        }\n        else if (lastOperation == null || lastOperation.kind !== OperationKind.COPY || lastOperation.end !== oldOffset) {\n          lastOperation = {\n            kind: OperationKind.COPY,\n            start: oldOffset,\n            end: oldOffset + blockSize,\n          }\n          operations.push(lastOperation)\n        }\n        else {\n          lastOperation.end += blockSize\n        }\n      }\n\n      if (changedBlockCount > 0) {\n        this.logger.info(`File${blockMapFile.name === \"file\" ? \"\" : (\" \" + blockMapFile.name)} has ${changedBlockCount} changed blocks`)\n      }\n    }\n    return operations\n  }\n\n  private async readRemoteBytes(start: number, endInclusive: number) {\n    const buffer = Buffer.allocUnsafe((endInclusive + 1) - start)\n    const requestOptions = this.createRequestOptions()\n    requestOptions.headers!!.Range = `bytes=${start}-${endInclusive}`\n    let position = 0\n    await this.request(requestOptions, chunk => {\n      chunk.copy(buffer, position)\n      position += chunk.length\n    })\n    return buffer\n  }\n\n  private request(requestOptions: RequestOptions, dataHandler: (chunk: Buffer) => void) {\n    return new BluebirdPromise((resolve, reject) => {\n      const request = this.httpExecutor.doRequest(requestOptions, response => {\n        // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\n        if (response.statusCode >= 400) {\n          reject(new HttpError(response))\n        }\n\n        if (response.statusCode !== 206) {\n          const acceptRanges = safeGetHeader(response, \"accept-ranges\")\n          if (acceptRanges == null || acceptRanges === \"none\") {\n            reject(new Error(\"Server doesn't support Accept-Ranges\"))\n          }\n        }\n\n        response.on(\"data\", dataHandler)\n        response.on(\"end\", () => {\n          resolve()\n        })\n      })\n      this.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n      request.end()\n    })\n  }\n}\n\nexport class SevenZipDifferentialDownloader extends DifferentialDownloader {\n  constructor(packageInfo: BlockMapDataHolder, httpExecutor: HttpExecutor<any>, options: DifferentialDownloaderOptions) {\n    super(packageInfo, httpExecutor, options)\n  }\n\n  protected get signatureSize() {\n    return SIGNATURE_HEADER_SIZE\n  }\n}\n\nenum OperationKind {\n  COPY, DOWNLOAD\n}\n\ninterface Operation {\n  kind: OperationKind\n\n  start: number\n  end: number\n}\n\nfunction buildEntryMap(list: Array<BlockMapFile>) {\n  const result = new Map<string, BlockMapFile>()\n  for (const item of list) {\n    result.set(item.name, item)\n  }\n  return result\n}\n\nfunction buildBlockFileMap(list: Array<BlockMapFile>) {\n  const result = new Map<string, BlockMapFile>()\n  for (const item of list) {\n    result.set(item.name, item)\n  }\n  return result\n}\n\nasync function readBlockMap(data: Buffer): Promise<BlockMap> {\n  return JSON.parse((await inflateRaw(data)).toString())\n}\n\nfunction formatBytes(value: number, symbol = \" KB\") {\n  return new Intl.NumberFormat(\"en\").format((value / 1024).toFixed(2) as any) + symbol\n}"]}
