{"version":3,"file":"GenericProvider.js","sourceRoot":"","sources":["../src/GenericProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,AAAO,AAAwB,AAAS,AAA4B,AAAM,AAAsB;;;;;;AAChG,AAAO,AAAE,AAAkB,AAAE,AAAoB,AAAE,AAAqB,AAAE,AAAmB,AAAE,AAAU,AAAE,AAAc,AAAE,AAAQ,AAA0B,AAAM,AAAQ;;;;;;AAC3K,AAAO,AAAE,AAAe,AAAE,AAAY,AAAE,AAAM,AAAY,AAE1D,AAAM;;;;MAAuB,AAAQ,AAAoB;AAIvD,gBAA6B,AAAmC,eAAE,AAA2B;AAC3F,AAAK,cAAC,AAAQ,AAAC;AADY,aAAa,gBAAb,AAAa,AAAsB;AAH/C,aAAO,UAAG,AAAU,wCAAC,AAAI,KAAC,AAAa,cAAC,AAAG,AAAC;AAC5C,aAAO,UAAG,AAAI,KAAC,AAAa,cAAC,AAAO,AAAC,AAAC,UAAC,AAAoB,kDAAC,AAAI,KAAC,AAAa,cAAC,AAAO,AAAC,AAAC,AAAC,WAAC,AAAqB,AAAE,AAIlI;AAAC;AAEK,AAAgB,oBAAtB,AAAK;;;;AACH,gBAAI,AAAkB;AACtB,kBAAM,AAAW,cAAG,AAAkB,gDAAC,AAAI,MAAC,AAAO,AAAC;AACpD,kBAAM,AAAU,aAAG,AAAc,4CAAC,AAAW,aAAE,AAAI,MAAC,AAAO,AAAC;AAC5D,gBAAI,AAAC;AACH,AAAM,yBAAG,AAAe,AAAC,sDAAC,MAAM,AAAI,MAAC,AAAQ,SAAC,AAAO,QAAC,AAAI,MAAC,AAAoB,qBAAC,AAAU,AAAC,AAAC,AAAG,eAAE,AAAW,aAAE,AAAU,AAAC,AAC3H;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAC,AAAY,AAAS,8EAAI,AAAC,EAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AAC5D,0BAAM,IAAI,AAAK,AAAC,8BAAwB,AAAW,6BAAkB,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,AAAC,AAC9F;AAAC;AACD,sBAAM,AAAC,AACT;AAAC;AAED,AAAE,AAAC,gBAAC,AAAmB,AAAE,AAAC,oDAAC,AAAC;AACzB,AAAc,uBAAC,AAAc,iBAAG,AAAU,WAAC,AAAI,AAClD;AAAC;AACD,AAAM,mBAAC,AAAM,AACf;;AAAC;AAED,AAAY,iBAAC,AAAsB;AACjC,AAAM,eAAC,AAAY,kDAAC,AAAU,YAAE,AAAI,KAAC,AAAO,AAAC,AAC/C;AAAC,AACF","sourcesContent":["import { GenericServerOptions, HttpError, HttpExecutor, UpdateInfo } from \"builder-util-runtime\"\nimport { getChannelFilename, getCustomChannelName, getDefaultChannelName, isUseOldMacProvider, newBaseUrl, newUrlFromBase, Provider, ResolvedUpdateFileInfo } from \"./main\"\nimport { parseUpdateInfo, resolveFiles } from \"./Provider\"\n\nexport class GenericProvider extends Provider<UpdateInfo> {\n  private readonly baseUrl = newBaseUrl(this.configuration.url)\n  private readonly channel = this.configuration.channel ? getCustomChannelName(this.configuration.channel) : getDefaultChannelName()\n\n  constructor(private readonly configuration: GenericServerOptions, executor: HttpExecutor<any>) {\n    super(executor)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    let result: UpdateInfo\n    const channelFile = getChannelFilename(this.channel)\n    const channelUrl = newUrlFromBase(channelFile, this.baseUrl)\n    try {\n      result = parseUpdateInfo((await this.executor.request(this.createRequestOptions(channelUrl)))!!, channelFile, channelUrl)\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`Cannot find channel \"${channelFile}\" update info: ${e.stack || e.message}`)\n      }\n      throw e\n    }\n\n    if (isUseOldMacProvider()) {\n      (result as any).releaseJsonUrl = channelUrl.href\n    }\n    return result\n  }\n\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\n    return resolveFiles(updateInfo, this.baseUrl)\n  }\n}"]}
