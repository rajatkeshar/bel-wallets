/// <reference types="node" />
import { BlockMapDataHolder, HttpExecutor } from "builder-util-runtime";
import { BlockMap } from "builder-util-runtime/out/blockMapApi";
import { OutgoingHttpHeaders } from "http";
import { Logger } from "./main";
export declare class DifferentialDownloaderOptions {
    readonly oldPackageFile: string;
    readonly newUrl: string;
    readonly logger: Logger;
    readonly newFile: string;
    readonly requestHeaders: OutgoingHttpHeaders | null;
}
export declare class DifferentialDownloader {
    private readonly blockAwareFileInfo;
    private readonly httpExecutor;
    private readonly options;
    private readonly baseRequestOptions;
    private fileMetadataBuffer;
    private readonly logger;
    constructor(blockAwareFileInfo: BlockMapDataHolder, httpExecutor: HttpExecutor<any>, options: DifferentialDownloaderOptions);
    protected readonly signatureSize: number;
    private createRequestOptions(method?);
    downloadNsisPackage(oldBlockMapFile: string): Promise<void>;
    downloadAppImage(oldBlockMap: BlockMap): Promise<void>;
    private download(oldBlockMap, newBlockMap);
    private downloadFile(operations);
    private computeOperations(oldBlockMap, newBlockMap);
    private readRemoteBytes(start, endInclusive);
    private request(requestOptions, dataHandler);
}
export declare class SevenZipDifferentialDownloader extends DifferentialDownloader {
    constructor(packageInfo: BlockMapDataHolder, httpExecutor: HttpExecutor<any>, options: DifferentialDownloaderOptions);
    protected readonly signatureSize: number;
}
