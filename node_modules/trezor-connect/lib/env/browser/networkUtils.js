"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.getOrigin = exports.httpRequest = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

require("whatwg-fetch");

var httpRequest = function httpRequest(url, type) {
  var response, txt;
  return _regenerator["default"].async(function httpRequest$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (type === void 0) {
            type = 'text';
          }

          _context.next = 3;
          return _regenerator["default"].awrap(fetch(url, {
            credentials: 'same-origin'
          }));

        case 3:
          response = _context.sent;

          if (!response.ok) {
            _context.next = 23;
            break;
          }

          if (!(type === 'json')) {
            _context.next = 12;
            break;
          }

          _context.next = 8;
          return _regenerator["default"].awrap(response.text());

        case 8:
          txt = _context.sent;
          return _context.abrupt("return", JSON.parse(txt));

        case 12:
          if (!(type === 'binary')) {
            _context.next = 18;
            break;
          }

          _context.next = 15;
          return _regenerator["default"].awrap(response.arrayBuffer());

        case 15:
          return _context.abrupt("return", _context.sent);

        case 18:
          _context.next = 20;
          return _regenerator["default"].awrap(response.text());

        case 20:
          return _context.abrupt("return", _context.sent);

        case 21:
          _context.next = 24;
          break;

        case 23:
          throw new Error("httpRequest error: " + url + " " + response.statusText);

        case 24:
        case "end":
          return _context.stop();
      }
    }
  });
};

exports.httpRequest = httpRequest;

var getOrigin = function getOrigin(url) {
  if (url.indexOf('file://') === 0) return 'file://'; // eslint-disable-next-line no-irregular-whitespace, no-useless-escape

  var parts = url.match(/^.+\:\/\/[^\/]+/);
  return Array.isArray(parts) && parts.length > 0 ? parts[0] : 'unknown';
};

exports.getOrigin = getOrigin;