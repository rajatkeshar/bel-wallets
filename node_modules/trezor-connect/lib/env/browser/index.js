"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.disableWebUSB = exports.requestLogin = exports.customMessage = exports.getSettings = exports.renderWebUSBButton = exports.uiResponse = exports.call = exports.init = exports.cancel = exports.dispose = exports.manifest = exports.eventEmitter = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _events = _interopRequireDefault(require("events"));

var _PopupManager = _interopRequireDefault(require("../../popup/PopupManager"));

var iframe = _interopRequireWildcard(require("../../iframe/builder"));

var _button = _interopRequireDefault(require("../../webusb/button"));

var _message = require("../../message");

var _ConnectSettings = require("../../data/ConnectSettings");

var _debug = _interopRequireWildcard(require("../../utils/debug"));

var _constants = require("../../constants");

var POPUP = _interopRequireWildcard(require("../../constants/popup"));

var IFRAME = _interopRequireWildcard(require("../../constants/iframe"));

var UI = _interopRequireWildcard(require("../../constants/ui"));

var ERROR = _interopRequireWildcard(require("../../constants/errors"));

var TRANSPORT = _interopRequireWildcard(require("../../constants/transport"));

var $T = _interopRequireWildcard(require("../../types"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var eventEmitter = new _events["default"]();
exports.eventEmitter = eventEmitter;

var _log = (0, _debug.init)('[trezor-connect.js]');

var _settings;

var _popupManager;

var initPopupManager = function initPopupManager() {
  var pm = new _PopupManager["default"](_settings);
  pm.on(POPUP.CLOSED, function (error) {
    iframe.postMessage({
      type: POPUP.CLOSED,
      payload: error ? {
        error: error
      } : null
    }, false);
  });
  return pm;
};

var manifest = function manifest(data) {
  _settings = (0, _ConnectSettings.parse)({
    manifest: data
  });
};

exports.manifest = manifest;

var dispose = function dispose() {
  iframe.dispose();

  if (_popupManager) {
    _popupManager.close();
  }
};

exports.dispose = dispose;

var cancel = function cancel(error) {
  if (_popupManager) {
    _popupManager.emit(POPUP.CLOSED, error);
  }
}; // handle message received from iframe


exports.cancel = cancel;

var handleMessage = function handleMessage(messageEvent) {
  // ignore messages from domain other then iframe origin
  if (messageEvent.origin !== iframe.origin) return;
  var message = (0, _message.parseMessage)(messageEvent.data);
  var event = message.event,
      type = message.type,
      payload = message.payload;
  var id = message.id || 0;

  _log.log('handleMessage', message);

  switch (event) {
    case _constants.RESPONSE_EVENT:
      if (iframe.messagePromises[id]) {
        // resolve message promise (send result of call method)
        iframe.messagePromises[id].resolve({
          id: id,
          success: message.success,
          payload: payload
        });
        delete iframe.messagePromises[id];
      } else {
        _log.warn("Unknown message id " + id);
      }

      break;

    case _constants.DEVICE_EVENT:
      // pass DEVICE event up to html
      eventEmitter.emit(event, message);
      eventEmitter.emit(type, payload); // DEVICE_EVENT also emit single events (connect/disconnect...)

      break;

    case _constants.TRANSPORT_EVENT:
      eventEmitter.emit(event, message);
      eventEmitter.emit(type, payload);
      break;

    case _constants.BLOCKCHAIN_EVENT:
      eventEmitter.emit(event, message);
      eventEmitter.emit(type, payload);
      break;

    case _constants.UI_EVENT:
      if (type === IFRAME.BOOTSTRAP) {
        iframe.clearTimeout();
        break;
      }

      if (type === IFRAME.LOADED) {
        iframe.initPromise.resolve();
      }

      if (type === IFRAME.ERROR) {
        iframe.initPromise.reject(new Error(payload.error));
      } // pass UI event up


      eventEmitter.emit(event, message);
      eventEmitter.emit(type, payload);
      break;

    default:
      _log.log('Undefined message', event, messageEvent);

  }
};

var init = function init(settings) {
  return _regenerator["default"].async(function init$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (settings === void 0) {
            settings = {};
          }

          if (!iframe.instance) {
            _context.next = 3;
            break;
          }

          throw ERROR.IFRAME_INITIALIZED;

        case 3:
          if (!_settings) {
            _settings = (0, _ConnectSettings.parse)(settings);
          }

          if (_settings.manifest) {
            _context.next = 6;
            break;
          }

          throw ERROR.MANIFEST_NOT_SET;

        case 6:
          if (!_settings.lazyLoad) {
            _context.next = 9;
            break;
          }

          // reset "lazyLoad" after first use
          _settings.lazyLoad = false;
          return _context.abrupt("return");

        case 9:
          if (!_popupManager) {
            _popupManager = initPopupManager();
          }

          _log.enabled = _settings.debug;
          window.addEventListener('message', handleMessage);
          window.addEventListener('beforeunload', dispose);
          _context.next = 15;
          return _regenerator["default"].awrap(iframe.init(_settings));

        case 15:
        case "end":
          return _context.stop();
      }
    }
  });
};

exports.init = init;

var call = function call(params) {
  var response;
  return _regenerator["default"].async(function call$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!(!iframe.instance && !iframe.timeout)) {
            _context2.next = 15;
            break;
          }

          // init popup with lazy loading before iframe initialization
          _settings = (0, _ConnectSettings.parse)(_settings);

          if (_settings.manifest) {
            _context2.next = 4;
            break;
          }

          return _context2.abrupt("return", {
            success: false,
            payload: {
              error: ERROR.MANIFEST_NOT_SET.message
            }
          });

        case 4:
          if (!_popupManager) {
            _popupManager = initPopupManager();
          }

          _popupManager.request(true); // auto init with default settings


          _context2.prev = 6;
          _context2.next = 9;
          return _regenerator["default"].awrap(init(_settings));

        case 9:
          _context2.next = 15;
          break;

        case 11:
          _context2.prev = 11;
          _context2.t0 = _context2["catch"](6);

          if (_popupManager) {
            _popupManager.close();
          }

          return _context2.abrupt("return", {
            success: false,
            payload: {
              error: _context2.t0
            }
          });

        case 15:
          if (!iframe.timeout) {
            _context2.next = 19;
            break;
          }

          return _context2.abrupt("return", {
            success: false,
            payload: {
              error: ERROR.NO_IFRAME.message
            }
          });

        case 19:
          if (!iframe.error) {
            _context2.next = 21;
            break;
          }

          return _context2.abrupt("return", {
            success: false,
            payload: {
              error: iframe.error
            }
          });

        case 21:
          // request popup window it might be used in the future
          if (_settings.popup && _popupManager) {
            _popupManager.request();
          } // post message to iframe


          _context2.prev = 22;
          _context2.next = 25;
          return _regenerator["default"].awrap(iframe.postMessage({
            type: IFRAME.CALL,
            payload: params
          }));

        case 25:
          response = _context2.sent;

          if (!response) {
            _context2.next = 31;
            break;
          }

          // TODO: unlock popupManager request only if there wasn't error "in progress"
          if (response.payload.error !== ERROR.DEVICE_CALL_IN_PROGRESS.message && _popupManager) {
            _popupManager.unlock();
          }

          return _context2.abrupt("return", response);

        case 31:
          if (_popupManager) {
            _popupManager.unlock();
          }

          return _context2.abrupt("return", {
            success: false,
            payload: {
              error: 'No response from iframe'
            }
          });

        case 33:
          _context2.next = 39;
          break;

        case 35:
          _context2.prev = 35;
          _context2.t1 = _context2["catch"](22);

          _log.error('__call error', _context2.t1);

          return _context2.abrupt("return", _context2.t1);

        case 39:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[6, 11], [22, 35]]);
};

exports.call = call;

var customMessageResponse = function customMessageResponse(payload) {
  iframe.postMessage({
    event: _constants.UI_EVENT,
    type: UI.CUSTOM_MESSAGE_RESPONSE,
    payload: payload
  });
};

var uiResponse = function uiResponse(response) {
  iframe.postMessage(_objectSpread({
    event: _constants.UI_EVENT
  }, response));
};

exports.uiResponse = uiResponse;

var renderWebUSBButton = function renderWebUSBButton(className) {
  (0, _button["default"])(className, _settings.webusbSrc, iframe.origin);
};

exports.renderWebUSBButton = renderWebUSBButton;

var getSettings = function getSettings() {
  return _regenerator["default"].async(function getSettings$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (iframe.instance) {
            _context3.next = 2;
            break;
          }

          return _context3.abrupt("return", {
            success: false,
            payload: {
              error: 'Iframe not initialized yet, you need to call TrezorConnect.init or any other method first.'
            }
          });

        case 2:
          _context3.next = 4;
          return _regenerator["default"].awrap(call({
            method: 'getSettings'
          }));

        case 4:
          return _context3.abrupt("return", _context3.sent);

        case 5:
        case "end":
          return _context3.stop();
      }
    }
  });
};

exports.getSettings = getSettings;

var customMessage = function customMessage(params) {
  var callback, customMessageListener, response;
  return _regenerator["default"].async(function customMessage$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          if (!(typeof params.callback !== 'function')) {
            _context5.next = 2;
            break;
          }

          return _context5.abrupt("return", {
            success: false,
            payload: {
              error: 'Parameter "callback" is not a function'
            }
          });

        case 2:
          // TODO: set message listener only if iframe is loaded correctly
          callback = params.callback;

          customMessageListener = function customMessageListener(event) {
            var data, payload;
            return _regenerator["default"].async(function customMessageListener$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    data = event.data;

                    if (!(data && data.type === UI.CUSTOM_MESSAGE_REQUEST)) {
                      _context4.next = 6;
                      break;
                    }

                    _context4.next = 4;
                    return _regenerator["default"].awrap(callback(data.payload));

                  case 4:
                    payload = _context4.sent;

                    if (payload) {
                      customMessageResponse(payload);
                    } else {
                      customMessageResponse({
                        message: 'release'
                      });
                    }

                  case 6:
                  case "end":
                    return _context4.stop();
                }
              }
            });
          };

          window.addEventListener('message', customMessageListener, false);
          _context5.next = 7;
          return _regenerator["default"].awrap(call(_objectSpread({
            method: 'customMessage'
          }, params, {
            callback: null
          })));

        case 7:
          response = _context5.sent;
          window.removeEventListener('message', customMessageListener);
          return _context5.abrupt("return", response);

        case 10:
        case "end":
          return _context5.stop();
      }
    }
  });
};

exports.customMessage = customMessage;

var requestLogin = function requestLogin(params) {
  var _callback, loginChallengeListener, response;

  return _regenerator["default"].async(function requestLogin$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          if (!(typeof params.callback === 'function')) {
            _context7.next = 11;
            break;
          }

          _callback = params.callback; // TODO: set message listener only if iframe is loaded correctly

          loginChallengeListener = function loginChallengeListener(event) {
            var data, payload;
            return _regenerator["default"].async(function loginChallengeListener$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    data = event.data;

                    if (!(data && data.type === UI.LOGIN_CHALLENGE_REQUEST)) {
                      _context6.next = 12;
                      break;
                    }

                    _context6.prev = 2;
                    _context6.next = 5;
                    return _regenerator["default"].awrap(_callback());

                  case 5:
                    payload = _context6.sent;
                    iframe.postMessage({
                      event: _constants.UI_EVENT,
                      type: UI.LOGIN_CHALLENGE_RESPONSE,
                      payload: payload
                    });
                    _context6.next = 12;
                    break;

                  case 9:
                    _context6.prev = 9;
                    _context6.t0 = _context6["catch"](2);
                    iframe.postMessage({
                      event: _constants.UI_EVENT,
                      type: UI.LOGIN_CHALLENGE_RESPONSE,
                      payload: _context6.t0.message
                    });

                  case 12:
                  case "end":
                    return _context6.stop();
                }
              }
            }, null, null, [[2, 9]]);
          };

          window.addEventListener('message', loginChallengeListener, false);
          _context7.next = 6;
          return _regenerator["default"].awrap(call(_objectSpread({
            method: 'requestLogin'
          }, params, {
            asyncChallenge: true,
            callback: null
          })));

        case 6:
          response = _context7.sent;
          window.removeEventListener('message', loginChallengeListener);
          return _context7.abrupt("return", response);

        case 11:
          _context7.next = 13;
          return _regenerator["default"].awrap(call(_objectSpread({
            method: 'requestLogin'
          }, params)));

        case 13:
          return _context7.abrupt("return", _context7.sent);

        case 14:
        case "end":
          return _context7.stop();
      }
    }
  });
};

exports.requestLogin = requestLogin;

var disableWebUSB = function disableWebUSB() {
  iframe.postMessage({
    event: _constants.UI_EVENT,
    type: TRANSPORT.DISABLE_WEBUSB
  });
};

exports.disableWebUSB = disableWebUSB;